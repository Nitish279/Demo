import { FC } from "react";
import Grid from "@mui/material/Grid2";
import { Card, Typography, CardContent } from "@mui/material";
import { styled } from "@mui/material/styles";
import Badge from "@mui/material/Badge";
import Avatar from "@mui/material/Avatar";
import Stack from "@mui/material/Stack";

const StyledBadge = styled(Badge)(({ theme }) => ({
  "& .MuiBadge-badge": {
    backgroundColor: "#44b700",
    color: "#44b700",
    boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,
    "&::after": {
      position: "absolute",
      top: 0,
      left: 0,
      width: "100%",
      height: "100%",
      borderRadius: "50%",
      animation: "ripple 1.2s infinite ease-in-out",
      border: "1px solid currentColor",
      content: '""',
    },
  },
  "@keyframes ripple": {
    "0%": {
      transform: "scale(.8)",
      opacity: 1,
    },
    "100%": {
      transform: "scale(2.4)",
      opacity: 0,
    },
  },
}));

const SmallAvatar = styled(Avatar)(({ theme }) => ({
  width: 22,
  height: 22,
  border: `2px solid ${theme.palette.background.paper}`,
}));

export interface ParticipantsProps {
  participants: string[];
  hasVoted: (participant: string) => boolean;
}

export const ParticipantsComponent: FC<ParticipantsProps> = ({
  participants,
  hasVoted,
}) => {
  // console.log(participants);

  let participantInitials = participants.map((name) => {
    let words = name.split(" ");
    if (words.length > 1) {
      return (
        words[0][0].toUpperCase() + words[words.length - 1][0].toUpperCase()
      );
    } else {
      return words[0][0].toUpperCase();
    }
  });

  return (
    <>
      <Typography variant="h6">Participants</Typography>
      <Grid container spacing={2}>
        {participants.map((participant, index) => (
          <Grid key={index}>
            <>
              <Avatar
                alt={participant}
                src="/static/images/avatar/1.jpg"
                style={{
                  backgroundColor: hasVoted(participant)
                    ? "#BBF7BB"
                    : "#FFCCCC",
                  border: hasVoted(participant)
                    ? `2px solid #44B700`
                    : `2px solid #FF7F7F`,
                }}
              >
                {participantInitials[index]}
              </Avatar>
            </>
          </Grid>
        ))}
      </Grid>
    </>
  );
};


=====

import { FC, useState } from "react";
import { Typography, Button } from "@mui/material";
import Grid from "@mui/material/Grid";

interface SelectPointsProps {
  submitVote: (point: number) => void;
}

export const SelectPointsComponent: FC<SelectPointsProps> = ({
  submitVote,
}) => {
  const [selectedPoint, setSelectedPoint] = useState<number | null>(null);
  const points = [0, 1, 2, 3, 5, 8, 13, 21, 34, 55];

  const handlePointSelect = (point: number) => {
    setSelectedPoint(point); // Set the selected point
    submitVote(point); // Call the submitVote function
  };

  return (
    <>
      <Typography
        variant="h6"
        style={{ marginBottom: "16px", textAlign: "center" }}
      >
        Select Your Points
      </Typography>
      <Grid container spacing={2} justifyContent="center">
        {points.map((point) => (
          <Grid item key={point}>
            <Button
              variant="outlined" // Use outlined for the card effect
              onClick={() => handlePointSelect(point)}
              sx={{
                backgroundColor:
                  selectedPoint === point
                    ? "#b2dfdb"
                    : point <= 5
                    ? "#bbdefb"
                    : point <= 13
                    ? "#c8e6c9"
                    : point <= 34
                    ? "#fff9c4"
                    : "#ffccbc",
                color: "#000",
                width: "80px", // Adjust width as needed
                height: "120px", // Adjust height as needed
                borderRadius: "8px",
                fontSize: "2rem", // Bigger font size for emphasis
                textAlign: "center",
                border: selectedPoint === point ? "2px dashed #000" : "none", // Dashed border for selected point
                boxShadow: "0 2px 5px rgba(0, 0, 0, 0.2)",
                transition: "background-color 300ms, box-shadow 300ms",
                outline: "none",
                opacity: selectedPoint === point ? 1 : 0.8, // Slight opacity change
                "&:active": {
                  transform: "scale(0.95)", // Scale down on press
                  boxShadow: "0 1px 3px rgba(0, 0, 0, 0.2)",
                },
              }}
            >
              {point}
            </Button>
          </Grid>
        ))}
      </Grid>
    </>
  );
};

// https://planning-poker-agile.web.app/game/01JATRTSR987XNHGY1261AQPND

===


import React from "react";
import { Card, CardContent, Typography, Grid } from "@mui/material";
import { Bar } from "react-chartjs-2";

interface Result {
  points: number;
  participants: string[];
}

interface ResultsSectionProps {
  results: Result[];
}

const ResultsSection: React.FC<ResultsSectionProps> = ({ results }) => {
  // Prepare data for chart
  const chartData = {
    labels: results.map((result) => result.points.toString()),
    datasets: [
      {
        label: "Votes",
        data: results.map((result) => result.participants.length),
        backgroundColor: "rgba(75, 192, 192, 0.6)",
        borderColor: "rgba(75, 192, 192, 1)",
        borderWidth: 1,
      },
    ],
  };

  return (
    <div style={{ padding: "20px", marginTop: "20px" }}>
      <Typography
        variant="h5"
        style={{ textAlign: "center", marginBottom: "20px" }}
      >
        Results
      </Typography>
      <Grid container spacing={3} justifyContent="center">
        <Grid item xs={12} md={6}>
          <Card variant="outlined">
            <CardContent>
              <Typography variant="h6">Voting Summary</Typography>
              {results.map((result, index) => (
                <div key={index}>
                  <Typography variant="subtitle1">
                    Points: {result.points}
                  </Typography>
                  <Typography variant="body2">Participants:</Typography>
                  <ul
                    style={{
                      paddingLeft: "20px",
                      maxHeight: "100px",
                      overflowY: "auto",
                    }}
                  >
                    {result.participants.map((participant, idx) => (
                      <li key={idx}>{participant}</li>
                    ))}
                  </ul>
                </div>
              ))}
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} md={6}>
          <Card variant="outlined">
            <CardContent>
              <Typography variant="h6">Votes Chart</Typography>
              <div style={{ height: "300px" }}>
                <Bar
                  data={chartData}
                  options={{
                    maintainAspectRatio: false,
                    scales: {
                      y: {
                        beginAtZero: true,
                        title: {
                          display: true,
                          text: "Number of Votes",
                        },
                        ticks: {
                          stepSize: 1,
                        },
                      },
                    },
                  }}
                />
              </div>
            </CardContent>
          </Card>
        </Grid>
      </Grid>
    </div>
  );
};

export default ResultsSection;


===


[
    {
        "points": 1,
        "participants": [
            "jhvjhv"
        ]
    },

i want ResultsSection to handle this type of response 
    {
        "points": 2,
        "participants": [
            "guiygiy"
        ]
    },
    {
        "points": 13,
        "participants": [
            "jhgfd fuguy",
            "lkjlkjl iugiu",
            "bibjh"
        ]
    }
]

import React from "react";
import { Paper, Button, Grid } from "@mui/material";
import VisibilityIcon from "@mui/icons-material/Visibility";
import ReplayIcon from "@mui/icons-material/Replay";
import DeleteIcon from "@mui/icons-material/Delete";
import ExitToAppIcon from "@mui/icons-material/ExitToApp";
import LinkIcon from "@mui/icons-material/Link";

interface GameControllerProps {
  onReveal: () => void;
  onRestart: () => void;
  onDelete: () => void;
  onExit: () => void;
  onInvite: () => void;
}

const GameController: React.FC<GameControllerProps> = ({
  onReveal,
  onRestart,
  onDelete,
  onExit,
  onInvite,
}) => {
  return (
    <Paper elevation={3} style={{ padding: "20px", borderRadius: "8px" }}>
      <Grid container spacing={2} justifyContent="center">
        <Grid item>
          <Button
            variant="outlined"
            color="primary"
            onClick={onReveal}
            sx={{
              width: "40px",
              height: "40px",
              borderRadius: "50%",
              "&:hover": {
                border: "2px solid rgba(0, 30, 255, 0.7)", // Blue with opacity on hover
                backgroundColor: "rgba(0, 30, 255, 0.1)", // Lighten the background color on hover
              },
            }}
          >
            <VisibilityIcon />
          </Button>
        </Grid>
        <Grid item>
          <Button
            variant="outlined"
            color="primary"
            onClick={onRestart}
            sx={{
              width: "40px",
              height: "40px",
              borderRadius: "50%",
              "&:hover": {
                border: "2px solid rgba(0, 30, 255, 0.7)",
                backgroundColor: "rgba(0, 30, 255, 0.1)",
              },
            }}
          >
            <ReplayIcon />
          </Button>
        </Grid>
        <Grid item>
          <Button
            variant="outlined"
            color="secondary"
            onClick={onDelete}
            sx={{
              width: "40px",
              height: "40px",
              borderRadius: "50%",
              "&:hover": {
                border: "2px solid rgba(0, 30, 255, 0.7)",
                backgroundColor: "rgba(0, 30, 255, 0.1)",
              },
            }}
          >
            <DeleteIcon />
          </Button>
        </Grid>
        <Grid item>
          <Button
            variant="outlined"
            color="primary"
            onClick={onExit}
            sx={{
              width: "40px",
              height: "40px",
              borderRadius: "50%",
              "&:hover": {
                border: "2px solid rgba(0, 30, 255, 0.7)",
                backgroundColor: "rgba(0, 30, 255, 0.1)",
              },
            }}
          >
            <ExitToAppIcon />
          </Button>
        </Grid>
        <Grid item>
          <Button
            variant="outlined"
            color="primary"
            onClick={onInvite}
            sx={{
              width: "40px",
              height: "40px",
              borderRadius: "50%",
              "&:hover": {
                border: "2px solid rgba(0, 30, 255, 0.7)",
                backgroundColor: "rgba(0, 30, 255, 0.1)",
              },
            }}
          >
            <LinkIcon />
          </Button>
        </Grid>
      </Grid>
    </Paper>
  );
};

export default GameController;
